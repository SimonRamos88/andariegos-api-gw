server:
  port: 7080
  ssl:
    enabled: false
    key-store: classpath:ssl/keystore.p12
    key-store-password: NuevaClaveSegura123
    key-store-type: PKCS12
    key-alias: andariegos

resilience4j:
  circuitbreaker:
    instances:
      EventsBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 30
        failureRateThreshold: 100
        waitDurationInOpenState: 80s
        permittedNumberOfCallsInHalfOpenState: 1
        minimumNumberOfCalls: 10

      AuthBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 2
        failureRateThreshold: 60
        waitDurationInOpenState: 80s
        permittedNumberOfCallsInHalfOpenState: 1
        minimumNumberOfCalls: 1

      ProfileBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 2
        failureRateThreshold: 60
        waitDurationInOpenState: 80s
        permittedNumberOfCallsInHalfOpenState: 1
        minimumNumberOfCalls: 1

      ReportsBreaker:
        registerHealthIndicator: true
        slidingWindowSize: 2
        failureRateThreshold: 60
        waitDurationInOpenState: 80s
        permittedNumberOfCallsInHalfOpenState: 1
        minimumNumberOfCalls: 1

  timelimiter:
    instances:
      CircuitBreakerInstance:
        timeoutDuration: 10s # ⏱ Tiempo máximo de espera para la respuesta
        cancelRunningFuture: true
      EventsBreaker:
        timeoutDuration: 10s
      ProfileBreaker:
        timeoutDuration: 10s
      AuthBreaker:
        timeoutDuration: 10s
      ReportsBreaker:
        timeoutDuration: 10s

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive.function.client: DEBUG
    reactor.netty.http.client: DEBUG
    io.github.resilience4j: DEBUG

spring:
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          "[/**]":
            allowedOrigins:
              - ${CLIENT_SERVICE}
              - ${MOBILE_PROXY_URL:http://localhost:8080}
            allowedMethods: "*"
            allowedHeaders: "*"
      routes:
        # ruta de reportes
        - id: all-report-route
          uri: ${REPORTS_SERVICE}
          predicates:
            - Path=/api/report
            - Method=GET
          filters:
            - name: CircuitBreaker
              args:
                name: ReportsBreaker

        - id: report-by-id-route
          uri: ${REPORTS_SERVICE}
          predicates:
            - Path=/api/report/{id}
            - Method=GET
          filters:
            - name: CircuitBreaker
              args:
                name: ReportsBreaker

        - id: report-by-state-route
          uri: ${REPORTS_SERVICE}
          predicates:
            - Path=/api/report/state/{state}
            - Method=GET
          filters:
            - name: CircuitBreaker
              args:
                name: ReportsBreaker

        - id: delete-report
          uri: ${REPORTS_SERVICE}
          predicates:
            - Path=/api/report/{id}
            - Method=DELETE
          filters:
            - RewritePath=/api/report/(?<id>.*), /api/reports/$\{id}

            - name: CircuitBreaker
              args:
                name: ReportsBreaker

        - id: update-report
          uri: ${REPORTS_SERVICE}
          predicates:
            - Path=/api/report/{id}
            - Method=PUT
          filters:
            - RewritePath=/api/report/(?<id>.*), /api/reports/$\{id}
            - name: CircuitBreaker
              args:
                name: ReportsBreaker

        - id: post-report
          uri: ${REPORTS_SERVICE}
          predicates:
            - Path=/api/report
            - Method=POST
          filters:
            - RewritePath=/api/report, /api/reports/
            - name: CircuitBreaker
              args:
                name: ReportsBreaker

        # Ruta para registro de eventos (nueva)
        - id: event-registration
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/events/registration
            - Method=POST
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        # Ruta existente para obtener asistentes (se mantiene igual)
        - id: event-attendees
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/events/registration/attendees/*
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        # Ruta para GET /api/events (obtener todos los eventos)
        - id: events-get-all
          uri: ${EVENT_SERVICE} # MS de Eventos
          predicates:
            - Path=/api/events
            - Method=GET
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker
                fallbackUri: forward:/fallback/events

        # Ruta para GET /api/events/{id} (obtener un evento específico)
        - id: events-get-by-id
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/events/{id}
            - Method=GET
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        # Ruta para POST /api/events (crear evento)
        - id: events-create
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/events
            - Method=POST
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        # Ruta para DELETE /api/events/{id} (eliminar evento)
        - id: events-delete
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/events/{id}
            - Method=DELETE
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        # Ruta para PUT /api/events/{id} (actualizar evento)
        - id: events-update
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/events/{id}
            - Method=PUT
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        # Ahora con tours
        - id: tours-create
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/tours
            - Method=POST
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        - id: tours-update
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/tours/{id}
            - Method=PUT
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        - id: tours-delete
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/tours/{id}
            - Method=DELETE
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        - id: tours-get-by-id
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/tours/{id}
            - Method=GET
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        - id: tours-get-all
          uri: ${EVENT_SERVICE}
          predicates:
            - Path=/api/tours
            - Method=GET
          filters:
            - name: CircuitBreaker
              args:
                name: EventsBreaker

        # RUTAS DE MS PROFILE
        - id: auth-login
          uri: ${AUTH_SERVICE}
          predicates:
            - Path=/api/auth/login
            - Method=POST
          filters:
            - name: CircuitBreaker
              args:
                name: AuthBreaker

        - id: auth-register
          uri: ${AUTH_SERVICE}
          predicates:
            - Path=/api/auth/register
            - Method=POST
          filters:
            - name: CircuitBreaker
              args:
                name: AuthBreaker

        # Perfil de usuario
        - id: user-profile
          uri: ${PROFILE_SERVICE}
          predicates:
            - Path=/api/profile
            - Method=GET
          filters:
            - RewritePath=/api/(?<segment>.*), /graphql/api/$\{segment}
            - name: CircuitBreaker
              args:
                name: ProfileBreaker

        # Registro de usuario
        - id: user-register
          uri: ${PROFILE_SERVICE}
          predicates:
            - Path=/api/registerUser
            - Method=POST
          filters:
            - RewritePath=/api/(?<segment>.*), /graphql/api/$\{segment}
            - name: CircuitBreaker
              args:
                name: ProfileBreaker

        # Consultas de usuarios (GraphQL)
        - id: users-find-by-ids
          uri: ${PROFILE_SERVICE}
          predicates:
            - Path=/api/findUsersByIds
            - Method=POST
          filters:
            - RewritePath=/api/(?<segment>.*), /graphql/api/$\{segment}
            - name: CircuitBreaker
              args:
                name: ProfileBreaker

        - id: users-find-all
          uri: ${PROFILE_SERVICE}
          predicates:
            - Path=/api/findAll
            - Method=GET
          filters:
            - RewritePath=/api/(?<segment>.*), /graphql/api/$\{segment}
            - name: CircuitBreaker
              args:
                name: ProfileBreaker

        - id: user-find-by-id
          uri: ${PROFILE_SERVICE}
          predicates:
            - Path=/api/findById
            - Method=GET
          filters:
            - RewritePath=/api/(?<segment>.*), /graphql/api/$\{segment}
            - name: CircuitBreaker
              args:
                name: ProfileBreaker

        # Operaciones CRUD
        - id: user-update
          uri: ${PROFILE_SERVICE}
          predicates:
            - Path=/api/updateUser
            - Method=PUT
          filters:
            - RewritePath=/api/(?<segment>.*), /graphql/api/$\{segment}
            - name: CircuitBreaker
              args:
                name: ProfileBreaker

        - id: user-remove
          uri: ${PROFILE_SERVICE}
          predicates:
            - Path=/api/removeUser
            - Method=DELETE
          filters:
            - RewritePath=/api/(?<segment>.*), /graphql/api/$\{segment}
            - name: CircuitBreaker
              args:
                name: ProfileBreaker

        - id: graphql
          uri: ${PROFILE_SERVICE}
          predicates:
            - Path=/graphql/**
          filters:
            - RewritePath=/graphql/(?<segment>.*), /${segment}
            - name: CircuitBreaker
              args:
                name: ProfileBreaker
